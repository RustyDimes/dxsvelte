{
  "version": 3,
  "sources": ["../src/resolver/routerResolver.$.py", "../src/resolver/routerTranslate.ts", "../src/settings/config.ts", "../src/resolver/routerResolver.ts", "../src/compiler/injector.ts", "../src/svelte/templates/layout.$.svelte", "../src/svelte/templates/root.$.svelte", "../src/svelte/templates/entrypoint-ssr.$.js", "../src/svelte/templates/entrypoint-csr.$.js", "../src/client/router.$.ts", "../src/client/dxs.$.ts", "../src/compiler/collate.ts", "../src/compiler/utils.ts", "../src/compiler/compile.ts", "../src/entrypoint-compiler.ts"],
  "sourcesContent": ["export default \"#!/usr/bin/python3\\r\\nimport os\\r\\nimport sys\\r\\nsys.path.append(os.getcwd())\\r\\nimport django\\r\\nfrom django.urls import get_resolver, URLPattern, URLResolver\\r\\nfrom django.urls.resolvers import RoutePattern\\r\\nimport json\\r\\nimport re\\r\\n\\r\\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', '{{app_name}}.settings')\\r\\ndjango.setup()\\r\\n\\r\\ndef get_urls_json():\\r\\n    resolver = get_resolver()\\r\\n    url_patterns = []\\r\\n\\r\\n    class DjangoJSONEncoder(json.JSONEncoder):\\r\\n        def default(self, obj):\\r\\n            if isinstance(obj, RoutePattern):\\r\\n                return str(obj)\\r\\n            elif isinstance(obj, re.Pattern):\\r\\n                return obj.pattern\\r\\n            elif hasattr(obj, '__dict__'):\\r\\n                return vars(obj)\\r\\n            return super().default(obj)\\r\\n        \\r\\n    def strip_prefix(obj):\\r\\n        text = str(obj)\\r\\n        regex = '\\\\w+(\\\\.\\\\w+)*(?= at|\\\\sof)'\\r\\n        output = \\\"\\\"\\r\\n        match = re.search(regex, text)\\r\\n        if match != None:\\r\\n            output = match.group()\\r\\n        return output\\r\\n    \\r\\n    def get_app_path(url_resolver):\\r\\n        if isinstance(url_resolver, URLResolver) and url_resolver.url_patterns and len(url_resolver.url_patterns) > 0 and isinstance(url_resolver.url_patterns[0], URLPattern):\\r\\n            return url_resolver.url_patterns[0].lookup_str.split('.')[0]\\r\\n        else:\\r\\n            return None\\r\\n\\r\\n    def convert_url_pattern(pattern):\\r\\n        if hasattr(pattern, 'url_patterns'):\\r\\n            # URLResolver\\r\\n            return {\\r\\n                'type': 'resolver',\\r\\n                'app_name': pattern.app_name,\\r\\n                'namespace': pattern.namespace,\\r\\n                'url_patterns': [convert_url_pattern(p) for p in pattern.url_patterns],\\r\\n                'prefix': pattern.pattern,\\r\\n                'app_path': get_app_path(pattern)\\r\\n            }\\r\\n        else:\\r\\n            # URLPattern\\r\\n            return {\\r\\n                'type': 'pattern',\\r\\n                'pattern': pattern.pattern,\\r\\n                'name': pattern.name,\\r\\n                'lookup_str': pattern.lookup_str,\\r\\n                'callback': strip_prefix(pattern.callback)\\r\\n            }\\r\\n\\r\\n    for pattern in resolver.url_patterns:\\r\\n        url_patterns.append(convert_url_pattern(pattern))\\r\\n\\r\\n    return json.dumps(url_patterns, cls=DjangoJSONEncoder)\\r\\n\\r\\noutput = get_urls_json()\\r\\n\\r\\n#+OPERATIONAL+#\\r\\nwith open('./{{cache}}/routerResolver.json', 'w') as file:\\r\\n    file.write(output)\\r\\n#+OPERATIONAL+#\\r\\n\\r\\n#+DEBUG+#\\r\\nprint(output)\\r\\n#+DEBUG+#\";", "import { join } from \"path\";\r\nimport { Pattern, Resolver, Route } from \"./routerTypes\";\r\nimport { __basedir, __cache } from \"../settings/config\";\r\nimport { writeFileSync } from \"fs\";\r\n\r\nfunction posixSlash(str: string | null) {\r\n  if (!str) return str;\r\n  return str.replace(/\\\\/g, \"/\");\r\n}\r\n\r\nfunction formatSvelteComponentFilepath(parent: string, str: string) {\r\n  if (str.length < 2) {\r\n    throw new Error(`${str} is not a valid component file.`);\r\n  }\r\n  const fname = `${str.slice(1)}.svelte`;\r\n  return posixSlash(join(__basedir, parent, \"views\", fname));\r\n}\r\n\r\nfunction formatSvelteComponentTagName(str: string) {\r\n  if (str.length < 2) return str;\r\n  return str.charAt(1).toUpperCase() + str.slice(2).replace(\"$\", \"\");\r\n}\r\n\r\nfunction capitaliseTagName(str: string) {\r\n  if (str.length === 0) return str;\r\n  let ret = str.charAt(0).toUpperCase();\r\n  if (str.length === 1) return ret;\r\n  return ret + str.slice(1);\r\n}\r\n\r\nfunction constructPathFromSegments(...segments: string[]) {\r\n  const path = segments.join(\"/\");\r\n  const cleanPath = path.replace(/\\/\\/+/g, \"/\");\r\n  const trimmedPath = cleanPath.replace(/^\\/|\\/$/g, \"\");\r\n  return \"/\" + trimmedPath;\r\n}\r\n\r\nexport function translateDjangoResolver(input: Resolver[]) {\r\n  const router: Route[] = [];\r\n  const traverse = (parent: Resolver | null, data: Pattern | Resolver) => {\r\n    if (data.type === \"resolver\") {\r\n      if (!Array.isArray(data.url_patterns)) return null;\r\n      data.url_patterns.map((item) => {\r\n        traverse({ ...data } as Resolver, item);\r\n      });\r\n    }\r\n    // We need to rework this massively. It's not enough to assume that every resolver marked to be included will be the child of an included view.\r\n    // Additionally, we've broken the home page!\r\n    // The fix to this will be to coerce the route as a 'Resolver' with a blank prefix. Resolvers (can) have Patterns, but Patterns don't have Resolvers.\r\n    if (data.type === \"pattern\") {\r\n      if (\r\n        !parent ||\r\n        !parent.app_path ||\r\n        !parent.prefix ||\r\n        typeof data.pattern !== \"string\" ||\r\n        !data.name ||\r\n        data.name[0] !== \"$\"\r\n      )\r\n        return null;\r\n      const route = {\r\n        app: parent.app_path,\r\n        path: (parent.prefix) ? constructPathFromSegments(parent.prefix, data.pattern) : constructPathFromSegments(data.pattern),\r\n        view: data.name ?? null,\r\n        component: data.name\r\n          ? capitaliseTagName(parent.app_path) +\r\n            formatSvelteComponentTagName(data.name)\r\n          : null,\r\n        filename:\r\n          data.name && parent.app_path\r\n            ? formatSvelteComponentFilepath(parent.app_path, data.name)\r\n            : null,\r\n      };\r\n      router.push(route);\r\n    }\r\n  };\r\n  if (!Array.isArray(input)) return router;\r\n  input.map((item) => traverse(null, item));\r\n  writeFileSync(join(__cache, \"debugRouter.json\"), JSON.stringify(router, null, 2))\r\n  return router;\r\n}", "// import sourceMap from \"source-map-support\";\r\nimport { existsSync, mkdirSync, readdirSync, readFileSync, rmSync, unlinkSync } from \"fs\";\r\nimport { join, resolve } from \"path\";\r\nimport * as url from \"url\";\r\n\r\nexport const cache = \"__svcache__\";\r\nexport const pythonCmd = \"python\";\r\nexport const __basedir = resolve(process.cwd());\r\nexport const __filename = url.fileURLToPath(import.meta.url);\r\nexport const __dirname = url.fileURLToPath(new URL(\".\", import.meta.url));\r\nexport const __cache = join(__basedir, cache);\r\n\r\n// Must verify the current working directory before continuing with configuration.\r\nconst runningInProjectRoot = existsSync(join(__basedir, \"manage.py\"));\r\nif (!runningInProjectRoot) {\r\n  console.error(\r\n    \"This script must be run from the Django project's root directory. Exiting.\"\r\n  );\r\n  process.exit(1);\r\n}\r\nconsole.log(`${__basedir} is a Django project directory. Continuing.`);\r\n\r\nexport const app_name = getMainApp();\r\nexport const __main = getMainApp();\r\nexport const __maindir = join(__basedir, __main);\r\n\r\nexport function getMainApp() {\r\n  const rxFunctionString =\r\n    /os\\.environ\\.setdefault\\(\\s*(['\\\"`])DJANGO_SETTINGS_MODULE\\1\\s*,\\s*\\s*(['\\\"`])(.+?)\\2\\s*\\)/;\r\n  const settingsStr = readFileSync(join(__basedir, \"manage.py\"), \"utf8\");\r\n  const settingsStrExtract = settingsStr.match(rxFunctionString) ?? [];\r\n  const settingsModuleExtract =\r\n    settingsStrExtract?.length > 3 ? settingsStrExtract[3] : \"\";\r\n  if (settingsModuleExtract === \"\") {\r\n    throw new Error(\"Could not extract settings from manage.py. Exiting.\");\r\n  }\r\n  const mainModuleExtract = settingsModuleExtract.split(\".\");\r\n  const mainModuleStr = mainModuleExtract[0];\r\n  return mainModuleStr;\r\n}\r\n\r\nexport function prepareSvCache() {\r\n  if (!existsSync(__cache)) {\r\n    mkdirSync(__cache, { recursive: true });\r\n  } else {\r\n    const files = readdirSync(__cache);\r\n    files.forEach((file) => {\r\n      const filePath = join(__cache, file);\r\n      unlinkSync(filePath);\r\n    });\r\n  }\r\n}\r\n\r\nexport function cleanSvCache() {\r\n  const files = readdirSync(__cache);\r\n  files.forEach((file) => {\r\n    const filePath = join(__cache, file);\r\n    unlinkSync(filePath);\r\n  });\r\n  rmSync(__cache, { recursive: true, force: true});\r\n  console.log(`Cleaned ${cache} artefacts.`);\r\n}\r\n\r\nexport default {\r\n  app_name,\r\n  cache,\r\n  pythonCmd,\r\n  __basedir,\r\n  __filename,\r\n  __dirname,\r\n  __cache,\r\n  __main,\r\n  __maindir,\r\n  prepareSvCache,\r\n  cleanSvCache\r\n};\r\n", "// @ts-ignore\r\nimport routerResolverRaw from \"./routerResolver.$.py\";\r\nimport { translateDjangoResolver } from \"./routerTranslate\"\r\nimport { Resolver } from \"./routerTypes\";\r\nimport { execSync } from \"child_process\";\r\nimport { readFileSync, writeFileSync, unlinkSync, mkdirSync, rmSync } from \"fs\";\r\nimport path from \"path\";\r\nimport config from '../settings/config'\r\nimport { injectOptionsIntoString } from '../compiler/injector';\r\nconst { __cache, app_name, cache } = config;\r\n\r\nexport function getRouter() {\r\n    console.log('Getting router...')    \r\n    \r\n    function stripBlock(input: string, tag: string): string {\r\n      const regexBlock = new RegExp(\r\n        `#\\\\+${tag}\\\\+#([\\\\s\\\\S]*?)#\\\\+${tag}\\\\+#`,\r\n        \"gm\"\r\n      );\r\n      const regexHead = new RegExp(`#\\\\+([\\\\S]*?)\\\\+#`, \"gm\");\r\n      input = input.replace(regexBlock, \"\");\r\n      input = input.replace(regexHead, \"\");\r\n      return input;\r\n    }\r\n        \r\n    let routerResolver: string;\r\n    \r\n    routerResolver =\r\n      process.env.NODE_ENV === \"debug\"\r\n        ? stripBlock(routerResolverRaw, \"OPERATIONAL\")\r\n        : stripBlock(routerResolverRaw, \"DEBUG\");\r\n    \r\n    routerResolver = injectOptionsIntoString({app_name, cache}, routerResolver);\r\n    \r\n    function importData() {\r\n      const routerBuildPyFname = path.join(__cache, \"tmp\");\r\n      const fname = path.join(__cache, \"routerResolver.json\");\r\n      try {\r\n        writeFileSync(routerBuildPyFname, routerResolver);\r\n        execSync(`${config.pythonCmd} ${routerBuildPyFname}`);\r\n        const fileUtf8 = readFileSync(fname, \"utf8\");\r\n        const fileJson = JSON.parse(fileUtf8);\r\n        return fileJson as Resolver[];\r\n      } catch (err) {\r\n        console.error(err);\r\n        throw new Error(\"Could Not Load Django Router Object\");\r\n      }\r\n    }\r\n    const djangoJsonResolver = importData()\r\n    const svelteJsonResolver = translateDjangoResolver(djangoJsonResolver)\r\n    return svelteJsonResolver\r\n}", "import { readFileSync } from \"fs\";\r\nimport type { Loader, Plugin, PluginBuild, StdinOptions } from \"esbuild\";\r\nimport { resolve } from \"path\";\r\nimport { compile } from \"svelte/compiler\";\r\nimport { CompileOptions } from \"svelte/types/compiler\";\r\n\r\nexport interface Opts {\r\n  [key: string]: string;\r\n}\r\n\r\nexport function injectOptionsIntoString(opts: Opts, document: string): string {\r\n  Object.keys(opts).forEach((key) => {\r\n    const regexOpt = new RegExp(`{{${key}}}`, \"g\");\r\n    const regexOptOmit = new RegExp(`{{!${key}}}`, \"g\");\r\n    document = document.replace(regexOpt, opts[key]);\r\n    document = document.replace(regexOptOmit, `{{${key}}}`);\r\n  });\r\n  return document;\r\n}\r\n\r\nexport function injectorPlugin(opts: Opts = {}): Plugin {\r\n  return {\r\n    name: \"document-injector\",\r\n    setup(build) {\r\n      build.onLoad({ filter: /\\.\\$\\.[\\S]+$/ }, async (args) => {\r\n        const document = readFileSync(args.path, \"utf8\");\r\n        const injected = injectOptionsIntoString(opts, document);\r\n        const suffix = args.path.split(\".\").pop()! as Loader;\r\n        const contents = `export default ${JSON.stringify(injected)};`;\r\n        return {\r\n          contents,\r\n          loader: \"js\" as Loader,\r\n        };\r\n      });\r\n    },\r\n  };\r\n}\r\n\r\nfunction isolateLoader(\r\n  requested: string,\r\n  loaders: StdinOptions[]\r\n): StdinOptions | null {\r\n  const resolvedRequest = resolve(requested);\r\n  return (\r\n    loaders.find((item) => resolve(item.sourcefile!) === resolvedRequest) ??\r\n    null\r\n  );\r\n}\r\n\r\nexport function vfLoaderPlugin(loaders: StdinOptions[] = [], compileOptions: CompileOptions): Plugin {\r\n  return {\r\n    name: \"virtual-file-injector\",\r\n    setup(build) {\r\n      build.onResolve({ filter: /\\.vf\\.[\\S]+$/ }, async (args) => {\r\n        console.log(\"VF Resolved: \" + args.path);\r\n        return { path: args.path };\r\n      });\r\n      build.onLoad({ filter: /\\.vf\\.[\\S]+$/ }, async (args) => {\r\n        const currentDocument = isolateLoader(args.path, loaders);\r\n        const contents = currentDocument!.contents;\r\n        const loader = currentDocument!.loader as Loader;\r\n\r\n        // Compile the vf with Svelte's compiler, if applicable\r\n        //@ts-ignore\r\n        if (loader === 'svelte') {\r\n          const compiledObj = compile(contents as string, compileOptions);\r\n          const compiledJs = compiledObj?.js?.code ?? null\r\n          if (!compiledJs) {\r\n            throw new Error('Compilation Failed for: ' + args.path)\r\n          }\r\n          return { contents: compiledJs, loader: 'js' };\r\n        }\r\n        return {\r\n          contents,\r\n          loader,\r\n        };\r\n      });\r\n    },\r\n  };\r\n}\r\n", "export default \"<slot/>\";", "export default \"<script>\\r\\n  import { activeViewStore, ssrHydrate, satisfiedStorePath } from \\\"{{router}}\\\";\\r\\n  import { writable } from \\\"svelte/store\\\";\\r\\n  {{layoutImportStatement}};\\r\\n  {{svelteComponentImports}};\\r\\n  // {{svelteComponentMap}}\\r\\n  export let ssrData = {};\\r\\n  export let currentView;\\r\\n  export let currentHref = currentView;\\r\\n  let trigger = [null]\\r\\n\\r\\n  ssrHydrate(currentView, ssrData);\\r\\n  activeViewStore.set({route: currentView, href: currentHref});\\r\\n  activeViewStore.subscribe((value) => {\\r\\n    if (typeof window !== \\\"undefined\\\") {\\r\\n      console.log('Root component updating to: ', value)\\r\\n    }\\r\\n    const reload = (currentHref !== value.href)\\r\\n    currentView = value.route;\\r\\n    currentHref = value.href;\\r\\n    if (reload) { trigger = [null] }\\r\\n  });\\r\\n</script>\\r\\n\\r\\n<!-- svelte-ignore missing-declaration -->\\r\\n<Layout>\\r\\n  {{svelteComponentsIfs}}\\r\\n</Layout>\\r\\n\";", "export default \"// Import compiled SSR Svelte app.\\r\\nimport App from '{{App}}';\\r\\n\\r\\n// Janky temporary workaround to avoid unneeded stdio outputs\\r\\nconst SSRPATH = process.argv[2];\\r\\nconst SSRJSON = process.argv[3];\\r\\n\\r\\n// const writer = process.stdout.write\\r\\n// process.stdout.write = () => null\\r\\nconst __console = console;\\r\\n\\r\\nconst currentView = SSRPATH ?? \\\"/\\\"\\r\\n\\r\\nlet initialDataPayload = {}\\r\\nlet initialDataPayloadScript = ''\\r\\nlet jsonString = ''\\r\\nlet jsonObject = {}\\r\\n\\r\\ntry {\\r\\n  jsonString = decodeURIComponent(SSRJSON)\\r\\n  jsonObject = JSON.parse(jsonString)\\r\\n  initialDataPayload[currentView] = jsonObject\\r\\n  initialDataPayloadScript = `<script>\\r\\n  window.initialDataPayload = { route: \\\\`${currentView}\\\\`, data: JSON.parse(\\\\`${jsonString}\\\\`) }\\r\\n  </script>`\\r\\n} catch (err) {\\r\\n  \\r\\n}\\r\\n\\r\\nconsole = new Proxy(\\r\\n  {},\\r\\n  {\\r\\n    get(target, prop) {\\r\\n      return function () {};\\r\\n    },\\r\\n  }\\r\\n);\\r\\n\\r\\n// Mount and render the application\\r\\nconst { head, html, css } = App.render({\\r\\n  currentView,\\r\\n  ssrData: jsonObject\\r\\n});\\r\\n\\r\\nconst htmlPreload = html + initialDataPayloadScript\\r\\n\\r\\n// Gather the application parts back into an object and serialise them into JSON\\r\\nconst outputJSON = JSON.stringify({ head, html: htmlPreload, css });\\r\\n\\r\\n// Pipe the output into the console using the hijacked console\\r\\n__console.log(outputJSON);\";", "export default \"// Import compiled CSR Svelte app.\\r\\nimport App from '{{App}}';\\r\\n\\r\\n// Clean up the pathname argument.\\r\\nfunction clPath (str) {\\r\\n  str = str.replace(/^\\\\/|\\\\/$/g, \\\"\\\");\\r\\n  str = str.replace(/\\\\/{2,}/g, \\\"/\\\");\\r\\n  str = `/${str}`;\\r\\n  return str\\r\\n}\\r\\n\\r\\n// Create a new DOM node\\r\\nconst container = document.createElement('body');\\r\\n\\r\\n// Mount the application.\\r\\nnew App({\\r\\n    target: container,\\r\\n    props: {\\r\\n      currentView: clPath(window.location.pathname)\\r\\n    }\\r\\n})\\r\\n\\r\\n// Replace the current document.body with the new DOM node hosting the app\\r\\ndocument.body.replaceWith(container);\";", "export default \"import { Writable, writable } from \\\"svelte/store\\\";\\r\\n\\r\\ndeclare global {\\r\\n  interface Window {\\r\\n    mode?: string;\\r\\n    initialDataPayload?: any;\\r\\n  }\\r\\n}\\r\\n\\r\\nfunction onlyPath(path: string) {\\r\\n  let queryIndex = path.indexOf(\\\"?\\\");\\r\\n  if (queryIndex !== -1) {\\r\\n    path = path.slice(0, queryIndex);\\r\\n  }\\r\\n  path = path.replace(/^\\\\/|\\\\/$/g, \\\"\\\");\\r\\n  path = path.replace(/\\\\/{2,}/g, \\\"/\\\");\\r\\n  path = \\\"/\\\" + path;\\r\\n  return path;\\r\\n}\\r\\n\\r\\nexport const activeViewStore = writable({\\r\\n  route: \\\"/\\\",\\r\\n  href: \\\"/\\\"\\r\\n});\\r\\n\\r\\n// The path as the key and the component is the value. This will be interpolated with a JSON representation of the routes.\\r\\nexport const routes = JSON.parse(`{{router}}`) as string[];\\r\\n\\r\\n// We need to create a series of functions which will evaluate paths against the router as well as reconstruct them from the patterns.\\r\\nfunction pathConstructor() {\\r\\n\\r\\n}\\r\\n\\r\\nfunction pathMatcher() {\\r\\n\\r\\n}\\r\\n\\r\\nclass ServerDataStore {\\r\\n  storePath: string;\\r\\n  data: Writable<any>;\\r\\n  stale: boolean;\\r\\n  constructor(storePath: string, data: any = {}, stale = true) {\\r\\n    this.storePath = storePath;\\r\\n    this.stale = stale;\\r\\n    const getInitialPayload = () => {\\r\\n      if (\\r\\n        typeof window !== \\\"undefined\\\" &&\\r\\n        typeof window === \\\"object\\\" &&\\r\\n        window.mode !== \\\"ssr\\\" &&\\r\\n        window.initialDataPayload?.route === this.storePath\\r\\n      ) {\\r\\n        const result = {...window.initialDataPayload.data}\\r\\n        delete window.initialDataPayload\\r\\n        return result\\r\\n      } else {\\r\\n        return data\\r\\n      }\\r\\n    }\\r\\n    this.data = writable(getInitialPayload());\\r\\n  }\\r\\n  async fetch(target:string|null = null) {\\r\\n    try {\\r\\n      const trimmedTarget = onlyPath(target ?? this.storePath)\\r\\n      const validatedTarget = (this.satisfiedBy(trimmedTarget)) ? trimmedTarget : this.storePath\\r\\n      const { protocol, hostname, port } = window.location;\\r\\n      const portDefault = protocol === \\\"https:\\\" ? \\\"443\\\" : \\\"80\\\";\\r\\n      const hostnameQualified = `${hostname}${\\r\\n        port && port !== portDefault ? \\\":\\\" + port : \\\"\\\"\\r\\n      }`;\\r\\n      const loc = `${protocol}//${hostnameQualified}${validatedTarget}`;\\r\\n      // Note: CSRF?\\r\\n      const reqOptions = {\\r\\n        method: \\\"DXS\\\",\\r\\n        headers: { \\\"Content-Type\\\": \\\"application/json\\\" },\\r\\n      };\\r\\n      const resultRaw = await fetch(loc, reqOptions);\\r\\n      const resultJson = await resultRaw.json();\\r\\n      this.data.set(resultJson);\\r\\n    console.info(\\\"DXS GET Result: \\\", resultJson);\\r\\n    } catch (err) {\\r\\n      console.error(\\\"Server Request Failed - Contact Site Administrator.\\\");\\r\\n    }\\r\\n  }\\r\\n  satisfiedBy(urlPath: string) {\\r\\n    function trim(str: string) {\\r\\n      return str.replace(/^\\\\/+|\\\\/+$/g, '');\\r\\n    }\\r\\n    const patternPath = /^<path:\\\\w+>$/\\r\\n    const patternGeneral = /^<\\\\w+:\\\\w+>$/;\\r\\n    type DjangoParamTypes = 'str'|'int'|'slug'|'uuid'|'path';\\r\\n    interface DjangoParams {\\r\\n      str: string\\r\\n      int: number\\r\\n      slug: string\\r\\n      uuid: string\\r\\n      path: string\\r\\n    }\\r\\n    const passedSegments = trim(urlPath).split(\\\"/\\\");\\r\\n    const referencedSegments = trim(this.storePath).split(\\\"/\\\"); \\r\\n    \\r\\n    // Handle blanks and return the result immediately\\r\\n    if (referencedSegments.length === 1 && referencedSegments[0] === \\\"\\\") return (passedSegments.length === 1 && passedSegments[0] === \\\"\\\")\\r\\n    \\r\\n    // Initialise the cumulative result\\r\\n    let result = true\\r\\n    referencedSegments.map((segment, index) => {\\r\\n      switch(true) {\\r\\n        // if it's not a match, just exit to avoid unnecessary checks\\r\\n        case (result === false):\\r\\n          break\\r\\n        // if the passed segment doesn't even contain one with this index number, fail\\r\\n        case (typeof passedSegments[index] === 'undefined'):\\r\\n          result = false\\r\\n          break\\r\\n        // if the segments are not a verbatim match AND not a normal (non-path) reference segment, fail\\r\\n        case (segment !== passedSegments[index] && !patternGeneral.test(segment)):\\r\\n          result = false\\r\\n          break\\r\\n        // if the segment is a path but this isn't the last segment, fail\\r\\n        case (patternPath.test(segment) && index < referencedSegments.length - 1):\\r\\n          result = false\\r\\n          break\\r\\n        // if this is the last segment in the reference but the passed one continues and this isn't a path, fail\\r\\n        case (index === referencedSegments.length - 1 && passedSegments.length > referencedSegments.length && !patternPath.test(segment)):\\r\\n          result = false\\r\\n          break\\r\\n      }\\r\\n    })    \\r\\n    return result\\r\\n  }\\r\\n}\\r\\n\\r\\ninterface ServerDataStoreType {\\r\\n  [key: string]: ServerDataStore;\\r\\n}\\r\\n\\r\\nexport const serverDataStore: ServerDataStoreType = {};\\r\\n\\r\\nexport function satisfiedStorePath(targetStorePath: string) {\\r\\n  const fetchedStore = Object.values(serverDataStore).find(dataStore => dataStore.satisfiedBy(targetStorePath))\\r\\n  if (typeof fetchedStore === 'undefined' || typeof fetchedStore !== 'object') return null\\r\\n  return fetchedStore.storePath\\r\\n}\\r\\n\\r\\nexport function getComponentFromTargetPath(targetStorePath: string) {\\r\\n  const fetchedStore = Object.values(serverDataStore).find(dataStore => dataStore.satisfiedBy(targetStorePath))\\r\\n  if (typeof fetchedStore === 'undefined' || typeof fetchedStore !== 'object') return null\\r\\n  return fetchedStore.storePath\\r\\n}\\r\\n\\r\\nexport function ssrHydrate(thisPath: string, payload: any) {\\r\\n  if (typeof process !== \\\"undefined\\\" && serverDataStore && serverDataStore[thisPath]) {\\r\\n    serverDataStore[thisPath].data.set(payload)\\r\\n  }\\r\\n}\\r\\n\\r\\nroutes.map((route) => {\\r\\n  serverDataStore[route] = new ServerDataStore(route)\\r\\n});\\r\\n\\r\\nfunction refreshServerStore(targetStorePath: string) {\\r\\n  const fetchedStore = Object.values(serverDataStore).find(dataStore => dataStore.satisfiedBy(targetStorePath))\\r\\n  if (typeof fetchedStore === 'undefined' || typeof fetchedStore !== 'object') return null\\r\\n  return fetchedStore.fetch(targetStorePath);\\r\\n}\\r\\n\\r\\nexport const goto = (href: string) => {\\r\\n  return async () => {\\r\\n    const thisPath = onlyPath(href);\\r\\n    // Guard clause to navigate to destinations not within the scope of the SPA router\\r\\n    const validPath = satisfiedStorePath(thisPath)\\r\\n    if (!validPath) {\\r\\n      return (window.location.href = href)\\r\\n    }\\r\\n    // Push the href into the history stack and update the stored location\\r\\n    await refreshServerStore(thisPath);\\r\\n    window.history.pushState({}, \\\"\\\", href);\\r\\n    activeViewStore.set({\\r\\n      route: validPath,\\r\\n      href: thisPath\\r\\n    });\\r\\n    // activeViewStore.update(value => value)\\r\\n  };\\r\\n};\\r\\n\\r\\nif (\\r\\n  typeof window !== \\\"undefined\\\" &&\\r\\n  typeof window === \\\"object\\\" &&\\r\\n  window.mode !== \\\"ssr\\\"\\r\\n) {\\r\\n  // Clean the temporary payload from the DOM\\r\\n  Array.from(document.getElementsByTagName('script')).forEach(script => (script.innerHTML.includes('window.initialDataPayload')) && script.remove())\\r\\n  function hrefHandle(e: MouseEvent) {\\r\\n    if (\\r\\n      e?.target &&\\r\\n      e.target instanceof HTMLElement &&\\r\\n      e.target.tagName.toLowerCase() === \\\"a\\\"\\r\\n    ) {\\r\\n      e.preventDefault();\\r\\n      const href = e.target.getAttribute(\\\"href\\\");\\r\\n      if (typeof href !== \\\"string\\\") {\\r\\n        return console.error(\\\"Invalid Href Attribute\\\");\\r\\n      }\\r\\n      goto(href)();\\r\\n    }\\r\\n  }\\r\\n  document.addEventListener(\\\"click\\\", function (e: MouseEvent) {\\r\\n    if (e?.target && e.target instanceof HTMLElement) {\\r\\n      if (e.target.tagName.toLowerCase() === \\\"a\\\") {\\r\\n        hrefHandle(e);\\r\\n      }\\r\\n    }\\r\\n  });\\r\\n  document.addEventListener(\\\"keydown\\\", function (e: KeyboardEvent) {\\r\\n    if (\\r\\n      e.key === \\\"Enter\\\" &&\\r\\n      e.target instanceof HTMLElement &&\\r\\n      e.target.tagName.toLowerCase() === \\\"a\\\"\\r\\n    ) {\\r\\n      e.target.click();\\r\\n    }\\r\\n  });\\r\\n}\\r\\n\\r\\n// data alias used only for SSR\\r\\nexport const data = writable({});\\r\\n\\r\\nexport default { goto, routes, serverDataStore, data, ssrHydrate };\\r\\n\";", "export default \"// This is a file which gets generated per module and in the same directory.\\r\\n// It ensures that objects being imported are 'localised' as appropriate.\\r\\n\\r\\n//@ts-ignore\\r\\nimport core from `{{fnameRouter}}`\\r\\nconst route = `{{path}}`\\r\\n\\r\\nexport const ServerSideProps = core.serverDataStore[route].data\\r\\n\\r\\nexport default { ServerSideProps }\";", "// Roll-up the template files\r\n//@ts-ignore\r\nimport layoutDefaultSvelte from \"../svelte/templates/layout.$.svelte\";\r\n//@ts-ignore\r\nimport rootDefaultSvelte from \"../svelte/templates/root.$.svelte\";\r\n//@ts-ignore\r\nimport entrypointSSR from \"../svelte/templates/entrypoint-ssr.$.js\";\r\n//@ts-ignore\r\nimport entrypointCSR from \"../svelte/templates/entrypoint-csr.$.js\";\r\n\r\n// Import the router script and component linkers\r\n//@ts-ignore\r\nimport routerDefault from \"../client/router.$.ts\";\r\n//@ts-ignore\r\nimport linkerDefault from \"../client/dxs.$.ts\";\r\n\r\n// General Imports\r\nimport type { Route } from \"../resolver/routerTypes\";\r\nimport { StdinOptions } from \"esbuild\";\r\nimport { existsSync } from \"fs\";\r\nimport { injectOptionsIntoString } from \"./injector\";\r\nimport { posixSlash } from \"./utils\";\r\nimport { join } from \"path\";\r\nimport {\r\n  __basedir,\r\n  __filename,\r\n  __dirname,\r\n  __cache,\r\n  __main,\r\n  __maindir,\r\n} from \"../settings/config\";\r\n\r\n// Construct the compiler data\r\nexport function constructCompiler(router: Route[]) {\r\n  const vfLoaders: StdinOptions[] = [];\r\n\r\n  function injectFile(sourcefile: string, contents: string) {\r\n    const loaderParts = sourcefile.split(\".\");\r\n    const loader = loaderParts[loaderParts.length - 1];\r\n    const vfLoader = {\r\n      contents,\r\n      sourcefile,\r\n      loader,\r\n    };\r\n    vfLoaders.push(vfLoader as StdinOptions);\r\n  }\r\n\r\n  // Construct the Layout import line; if the user's one doesn't exist, import the virtual one and change the fname\r\n  let fnameLayout = posixSlash(join(__maindir, \"layout.svelte\"));\r\n  if (!existsSync(fnameLayout)) {\r\n    fnameLayout = posixSlash(join(__maindir, \"layout.vf.svelte\"));\r\n    injectFile(fnameLayout, layoutDefaultSvelte as unknown as string);\r\n  }\r\n\r\n  // Construct the Root component from the resolved router data\r\n  const fnameRoot = posixSlash(join(__cache, \"root.vf.svelte\"));\r\n  const layoutImportStatement = `import Layout from '${fnameLayout}'`;\r\n  // Statement constructors\r\n  const routeImports = (route: Route) =>\r\n    `import ${route.component} from '${route.filename}'`;\r\n  const routeIfs = (route: Route) =>\r\n    `{#each trigger as instance}{#if satisfiedStorePath(currentView) === '${route.path}'}<${route.component}></${route.component}>{/if}{/each}`;\r\n  \r\n  // const svelteComponentMap = () => {\r\n  //   const body = router.map(route => `[\"${route.path}\"]: ${route.component}`)\r\n  // } \r\n\r\n  const svelteComponentImportsArr = router.map((route) => routeImports(route));\r\n  const svelteComponentsIfsArr = router.map((route) => routeIfs(route));\r\n\r\n  const svelteComponentImports = svelteComponentImportsArr.join(\"\\n\");\r\n  const svelteComponentsIfs = svelteComponentsIfsArr.join(\"\\n\");\r\n\r\n  // Router Imports\r\n  const strRouterArray = JSON.stringify(router.map((route) => route.path));\r\n  const fnameRouter = posixSlash(join(__maindir, \"router.vf.ts\"));\r\n  const configuredRouter = injectOptionsIntoString(\r\n    { router: strRouterArray },\r\n    routerDefault\r\n  );\r\n  injectFile(fnameRouter, configuredRouter);\r\n\r\n  const rootSvelte = injectOptionsIntoString(\r\n    {\r\n      router: fnameRouter,\r\n      layoutImportStatement,\r\n      svelteComponentImports,\r\n      svelteComponentsIfs,\r\n    },\r\n    rootDefaultSvelte as unknown as string\r\n  );\r\n\r\n  // Inject a local .vf.ts for each route component\r\n  const routeLinker = (route: Route) => {\r\n    const conf = {\r\n      path: route.path,\r\n      fnameRouter,\r\n    };\r\n    const linkerLocalised = injectOptionsIntoString(conf, linkerDefault);\r\n    const fname = `${route.filename}.dxs.vf.ts`;\r\n    injectFile(fname, linkerLocalised);\r\n  };\r\n\r\n  router.map((route) => routeLinker(route));\r\n\r\n  // Create the Svelte App import strings for the entrypoint files and inject them into the files\r\n  const configuredEntrypointSSR = injectOptionsIntoString(\r\n    { App: fnameRoot },\r\n    entrypointSSR\r\n  );\r\n  const configuredEntrypointCSR = injectOptionsIntoString(\r\n    { App: fnameRoot },\r\n    entrypointCSR\r\n  );\r\n\r\n  // Create the entrypoint file paths\r\n  const entrypointSSRPath = `${posixSlash(join(__cache, \"ssr.vf.js\"))}`;\r\n  const entrypointCSRPath = `${posixSlash(join(__cache, \"csr.vf.js\"))}`;\r\n\r\n  injectFile(fnameRoot, rootSvelte);\r\n  injectFile(entrypointSSRPath, configuredEntrypointSSR);\r\n  injectFile(entrypointCSRPath, configuredEntrypointCSR);\r\n\r\n  return {\r\n    vfLoaders,\r\n    entrypointSSRPath,\r\n    entrypointCSRPath,\r\n  };\r\n}\r\n", "export function posixSlash(str: string) {\r\n  if (!str) return str;\r\n  return str.replace(/\\\\/g, \"/\");\r\n}", "import esbuild, { Plugin } from \"esbuild\";\r\nimport esbuildSvelte from \"esbuild-svelte\";\r\n// import postcssPlugin from \"esbuild-plugin-postcss\";\r\nimport { join, resolve } from \"path\";\r\nimport { CompileOptions } from \"svelte/types/compiler\";\r\nimport { StdinOptions } from \"esbuild\";\r\nimport { __maindir, __basedir } from \"../settings/config\";\r\n\r\nimport { vfLoaderPlugin } from \"./injector\";\r\nimport { mkdirSync, existsSync } from \"fs\";\r\nimport { posixSlash } from \"./utils\";\r\nimport { pathToFileURL } from 'url';\r\n\r\n\r\n// This is where we 'redirect' @dxs import to the local *.dxs.ts file.\r\nfunction svelteDataResolver(): Plugin {\r\n  return {\r\n    name: 'svelte-data-resolver',\r\n    setup(build) {\r\n      build.onResolve({ filter: /^@dxs$/ }, (args) => {\r\n        const original = posixSlash(args.importer)\r\n        const path = `${original}.dxs.vf.ts`\r\n        console.log('Virtual @dxs: ', path)\r\n        return {\r\n          path\r\n        };\r\n      });\r\n    },\r\n  };\r\n}\r\n\r\nexport async function compile(\r\n  entrypoint: string,\r\n  vfLoaders: StdinOptions[],\r\n  ver: \"ssr\" | \"csr\"\r\n) {\r\n  // Output the version being compiled\r\n  console.log(\"Compiling...\", ver, entrypoint);\r\n\r\n  const compileOptionsCsr: CompileOptions = {\r\n    generate: \"dom\",\r\n    dev: false,\r\n    format: \"esm\",\r\n  };\r\n\r\n  const compileOptionsSsr: CompileOptions = {\r\n    generate: \"ssr\",\r\n    dev: false,\r\n    hydratable: true,\r\n    format: \"esm\",\r\n    css: true,\r\n  };\r\n\r\n  const compilerOptions = ver === \"ssr\" ? compileOptionsSsr : compileOptionsCsr;\r\n\r\n  try {\r\n    mkdirSync(join(__basedir, \"static\"));\r\n  } catch (err) {}\r\n\r\n  const outfile =\r\n    ver === \"ssr\"\r\n      ? join(__maindir, \"svelte.ssr.js\")\r\n      : join(__basedir, \"static\", \"svelte.csr.js\");\r\n\r\n  async function loadRootConfig(filePrefix: string): Promise<any> {\r\n    const fextns = [\r\n      filePrefix + '.js',\r\n      filePrefix + '.mjs',\r\n      filePrefix + '.cjs'\r\n    ]\r\n    const fnames = fextns.map(fname => join(__basedir, fname))\r\n    const rootConfigFname = fnames.find(fname => existsSync(fname))\r\n    if (!rootConfigFname) return []\r\n    const rootConfigFnameString = pathToFileURL(rootConfigFname).toString()\r\n    const rootConfigModule = await import(rootConfigFnameString)\r\n    if (typeof rootConfigModule !== 'undefined') {\r\n      console.log('Loaded ' + filePrefix)\r\n      console.log(rootConfigModule)\r\n      return rootConfigModule\r\n    }\r\n  }\r\n\r\n  const svelteConfigModule = ver === \"ssr\" ? {preprocess: []} : await loadRootConfig('svelte.config')\r\n  const preprocess = (svelteConfigModule?.preprocess) ? svelteConfigModule.preprocess : []\r\n  const purgeCss = true\r\n  \r\n  const plugins = [\r\n    vfLoaderPlugin(vfLoaders, compilerOptions),\r\n    svelteDataResolver(),\r\n    esbuildSvelte({\r\n      preprocess,\r\n      compilerOptions,\r\n    })\r\n  ]\r\n\r\n  return esbuild\r\n    .build({\r\n      entryPoints: [entrypoint],\r\n      mainFields: [\"svelte\", \"browser\", \"module\", \"main\"],\r\n      bundle: true,\r\n      outfile,\r\n      format: \"esm\",\r\n      plugins,\r\n    })\r\n    .catch(() => {\r\n      const msg =\r\n        ver === \"csr\"\r\n          ? \"CSR Application Build Failed. Exiting.\"\r\n          : \"SSR Application Build Failed. Exiting.\";\r\n      console.error(msg);\r\n      process.exit(1);\r\n    });\r\n}\r\n", "// import sourceMap from \"source-map-support\";\r\nimport { getRouter } from \"./resolver/routerResolver\";\r\nimport {\r\n  __basedir,\r\n  __filename,\r\n  __dirname,\r\n  __cache,\r\n  __main,\r\n  __maindir,\r\n  prepareSvCache,\r\n  cleanSvCache,\r\n} from \"./settings/config\";\r\nimport { constructCompiler } from \"./compiler/collate\";\r\nimport { compile } from \"./compiler/compile\";\r\n\r\n// Initialise the cache folder\r\nprepareSvCache();\r\n\r\n// Get the resolved and translated router object from the Django application\r\nconst router = getRouter();\r\nconst compilerConf = constructCompiler(router);\r\n\r\n// Debug output\r\nconsole.dir(router)\r\n\r\n// Compile the user's application\r\nawait compile(compilerConf.entrypointCSRPath, compilerConf.vfLoaders, \"csr\");\r\nawait compile(compilerConf.entrypointSSRPath, compilerConf.vfLoaders, \"ssr\");\r\n\r\n// Clean up the cache folder. Sometimes commented out for debugging, need to implement debug flags\r\n// cleanSvCache();"],
  "mappings": "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",
  "names": ["routerResolver_default", "join", "existsSync", "mkdirSync", "readdirSync", "readFileSync", "rmSync", "unlinkSync", "join", "resolve", "url", "cache", "pythonCmd", "__basedir", "__filename", "__dirname", "__cache", "runningInProjectRoot", "app_name", "getMainApp", "__main", "__maindir", "rxFunctionString", "settingsStrExtract", "settingsModuleExtract", "prepareSvCache", "file", "filePath", "cleanSvCache", "config_default", "writeFileSync", "posixSlash", "str", "formatSvelteComponentFilepath", "parent", "fname", "join", "__basedir", "formatSvelteComponentTagName", "capitaliseTagName", "ret", "constructPathFromSegments", "segments", "translateDjangoResolver", "input", "router", "traverse", "data", "item", "route", "__cache", "execSync", "readFileSync", "writeFileSync", "path", "readFileSync", "resolve", "compile", "injectOptionsIntoString", "opts", "document", "key", "regexOpt", "regexOptOmit", "isolateLoader", "requested", "loaders", "resolvedRequest", "resolve", "item", "vfLoaderPlugin", "compileOptions", "build", "args", "currentDocument", "contents", "loader", "compiledJs", "compile", "__cache", "app_name", "cache", "config_default", "getRouter", "stripBlock", "input", "tag", "regexBlock", "regexHead", "routerResolver", "routerResolver_default", "injectOptionsIntoString", "importData", "routerBuildPyFname", "path", "fname", "writeFileSync", "execSync", "fileUtf8", "readFileSync", "err", "djangoJsonResolver", "translateDjangoResolver", "layout_default", "root_default", "entrypoint_ssr_default", "entrypoint_csr_default", "router_default", "dxs_default", "existsSync", "posixSlash", "str", "join", "constructCompiler", "router", "vfLoaders", "injectFile", "sourcefile", "contents", "loaderParts", "loader", "vfLoader", "fnameLayout", "posixSlash", "join", "__maindir", "existsSync", "layout_default", "fnameRoot", "__cache", "layoutImportStatement", "routeImports", "route", "routeIfs", "svelteComponentImportsArr", "svelteComponentsIfsArr", "svelteComponentImports", "svelteComponentsIfs", "strRouterArray", "fnameRouter", "configuredRouter", "injectOptionsIntoString", "router_default", "rootSvelte", "root_default", "routeLinker", "conf", "linkerLocalised", "dxs_default", "fname", "configuredEntrypointSSR", "entrypoint_ssr_default", "configuredEntrypointCSR", "entrypoint_csr_default", "entrypointSSRPath", "entrypointCSRPath", "esbuild", "esbuildSvelte", "join", "mkdirSync", "existsSync", "pathToFileURL", "svelteDataResolver", "build", "args", "path", "posixSlash", "compile", "entrypoint", "vfLoaders", "ver", "compilerOptions", "mkdirSync", "join", "__basedir", "outfile", "__maindir", "loadRootConfig", "filePrefix", "rootConfigFname", "fname", "existsSync", "rootConfigModule", "svelteConfigModule", "preprocess", "purgeCss", "plugins", "vfLoaderPlugin", "esbuildSvelte", "esbuild", "prepareSvCache", "router", "getRouter", "compilerConf", "constructCompiler", "compile"]
}
