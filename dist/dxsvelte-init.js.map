{
  "version": 3,
  "sources": ["../src/django/dxsvelte.$.py", "../src/django/addFiles.ts", "../src/settings/config.ts", "../src/entrypoint-init.ts"],
  "sourcesContent": ["export default \"# Import necessary libraries\\r\\nimport base64\\r\\nfrom django.http import HttpResponse\\r\\nfrom django.conf import settings\\r\\nfrom django.urls import resolve\\r\\nfrom os.path import join, exists\\r\\nimport json\\r\\nfrom py_mini_racer import MiniRacer\\r\\nfrom django.middleware.csrf import get_token # Currently unused, on the to-do list\\r\\n\\r\\n# Add @static_view decorator - this adds an attribute to the view which is used by the\\r\\n# router resolver to mark it as a static view, mitigating some unnecessary server hits.\\r\\ndef static_view(cb):\\r\\n    def middleware(req):\\r\\n        return cb(req)\\r\\n    middleware.is_static_view = True\\r\\n    return middleware\\r\\n\\r\\n# Check for existence of Svelte SSR files and set defaults if they don't exist\\r\\nproject = settings.ROOT_URLCONF.split('.')[0]\\r\\n\\r\\n# Load the Svelte SSR JavaScript file, or set to an erroneous default if it doesn't exist\\r\\nsvelte_ssr_js_path = join(settings.BASE_DIR, project, \\\"svelte.ssr.js\\\")\\r\\nif exists(svelte_ssr_js_path):\\r\\n    svelte_ssr_js_utf8 = open(svelte_ssr_js_path, \\\"r\\\", encoding='utf-8').read()\\r\\nelse:\\r\\n    svelte_ssr_js_utf8 = \\\"result = { html: \\\\\\\"404\\\\\\\" };\\\"\\r\\n\\r\\n# Load the Svelte SSR HTML file, or set to a default value if it doesn't exist\\r\\nsvelte_ssr_html_path = join(settings.BASE_DIR, \\\"static\\\", \\\"index.html\\\")\\r\\nif exists(svelte_ssr_html_path):\\r\\n    svelte_ssr_html_utf8 = open(svelte_ssr_html_path, \\\"r\\\", encoding='utf-8').read()\\r\\nelse:\\r\\n    svelte_ssr_html_utf8 = \\\"\\\"\\\"<!doctype html><html lang=\\\"en\\\"><head><meta charset=\\\"utf-8\\\" /><meta http-equiv=\\\"X-UA-Compatible\\\" content=\\\"IE=edge,chrome=1\\\" /><meta content=\\\"width=device-width, initial-scale=1.0\\\" name=\\\"viewport\\\" /><meta name=\\\"viewport\\\" content=\\\"width=device-width\\\" /><title>Django App</title><link rel=\\\"stylesheet\\\" href=\\\"/static/svelte.csr.css\\\"></head><body>{{app}}</body><script src='/static/svelte.csr.js' defer></script></html>\\\"\\\"\\\"\\r\\n\\r\\n# Concatenate path components and normalise the result\\r\\ndef abs_path(*paths):\\r\\n    joined_path = '/'.join(paths)\\r\\n    cleaned_path = joined_path.replace('//', '/')\\r\\n    if cleaned_path.startswith('/'):\\r\\n        final_path = cleaned_path\\r\\n    else:\\r\\n        final_path = '/' + cleaned_path\\r\\n    final_path = final_path.rstrip('/')\\r\\n    return final_path\\r\\n\\r\\n# Wrap the Svelte SSR markup with the template container\\r\\ndef svelte_ssr_html_wrap(app):\\r\\n    return svelte_ssr_html_utf8.replace(\\\"{{app}}\\\", app, 1)\\r\\n\\r\\n# Remove leading and trailing slashes\\r\\ndef _normalise_url(url):\\r\\n    url = url.strip(\\\"/\\\")\\r\\n    url = \\\"/\\\" + url.lstrip(\\\"/\\\")\\r\\n    return url\\r\\n\\r\\n# Newline escaping, in abeyance as no longer needed\\r\\nclass JSONEncoderEscaped(json.JSONEncoder):\\r\\n    def encode(self, obj):\\r\\n        json_string = super().encode(obj)\\r\\n        return json_string.replace('\\\\n', '\\\\\\\\n')\\r\\n\\r\\n# Process the render request given a path and payload\\r\\ndef _render(req_path, data = {}):\\r\\n    ctx = MiniRacer()\\r\\n    json_data = json.dumps(data)\\r\\n    encoded_data = base64.b64encode(json_data.encode('utf-8')).decode('utf-8')\\r\\n    encoded_str = encoded_data.replace('+', '-').replace('/', '_')\\r\\n    set_consts = f\\\"const SSRPATH='{req_path}'; const SSRJSON='{encoded_str}';\\\"    \\r\\n    ctx.eval(set_consts)\\r\\n    ctx.eval(svelte_ssr_js_utf8)\\r\\n    resultString = ctx.eval(\\\"result\\\")\\r\\n    resultJson = json.loads(resultString)\\r\\n    result = resultJson[\\\"html\\\"]\\r\\n    return result\\r\\n\\r\\n# Add headers and create the response\\r\\ndef _send(request, data, mime):\\r\\n    response = HttpResponse(data, content_type=mime)\\r\\n    response.set_cookie(key='X-CSRFToken', value=get_token(request), httponly=True)\\r\\n    return response\\r\\n\\r\\n# Define gets and posts more tidily in the views.py, will likely be removed in future\\r\\ndef route(request, get, post):\\r\\n    if request.method == \\\"GET\\\":\\r\\n        return get()\\r\\n    if request.method == \\\"POST\\\":\\r\\n        return post()\\r\\n\\r\\n# Handle the incoming request\\r\\ndef render(request, data = {}):\\r\\n    # This is a variant of 'GET' to serve the SPA fetches\\r\\n    if 'HTTP_X_DXS_METHOD' in request.META and request.META['HTTP_X_DXS_METHOD'] == 'GET':\\r\\n        data_json = json.dumps(data)\\r\\n        return HttpResponse(data_json, content_type=\\\"application/json\\\")\\r\\n    req_path = _normalise_url(resolve(request.path_info).route)\\r\\n    rendered_output = _render(req_path, data)\\r\\n    interpolated_output = svelte_ssr_html_wrap(rendered_output)\\r\\n    return HttpResponse(interpolated_output, content_type=\\\"text/html\\\")\";", "// @ts-ignore\r\nimport dxsvelteTemplate from './dxsvelte.$.py'\r\nimport { accessSync, readFileSync, writeFileSync } from 'fs'\r\nimport { __basedir, __main } from '../settings/config'\r\nimport { basename, join } from 'path'\r\n\r\nfunction getPath(file: string) {\r\n  return join(__basedir, file)\r\n}\r\n\r\nfunction exists(fpath: string) {\r\n  try {\r\n    accessSync(fpath)\r\n    return true\r\n  } catch (err) {\r\n    return false\r\n  }\r\n}\r\n\r\nlet _mainDir: string | null = null\r\nfunction mainDir() {\r\n  if (_mainDir !== null) return _mainDir\r\n  const managePyContent = readFileSync('./manage.py', 'utf8').toString()\r\n  const match = managePyContent.match(\r\n    /os\\.environ\\.setdefault\\(\"DJANGO_SETTINGS_MODULE\",\\s*[\"'](.+)\\.settings[\"']\\)/\r\n  )\r\n  if (match) {\r\n    let djangoSettingsModule = match[1]\r\n    djangoSettingsModule = djangoSettingsModule.replace(/^\"(.*)\"$/, '$1')\r\n    djangoSettingsModule = djangoSettingsModule.replace(/^'(.*)'$/, '$1')\r\n    _mainDir = djangoSettingsModule\r\n    return _mainDir\r\n  } else {\r\n    throw new Error('DJANGO_SETTINGS_MODULE not found in manage.py.')\r\n  }\r\n}\r\n\r\nconst isObj = (obj: any) => {\r\n  if (typeof obj !== 'object') return false\r\n  if (Array.isArray(obj)) return false\r\n  if (obj === null) return false\r\n  return true\r\n}\r\n\r\nasync function getExistingJson(fpath: string) {\r\n  try {\r\n    const file = readFileSync(fpath, 'utf8').toString()\r\n    const json = JSON.parse(file)\r\n    if (!isObj(json)) {\r\n      const fname = basename(fpath)\r\n      throw new Error(`File ${fname} is an Array. Skipping update.`)\r\n    }\r\n    return json\r\n  } catch (err) {\r\n    const fileExists = exists(fpath)\r\n    if (fileExists) {\r\n      const fname = basename(fpath)\r\n      console.error(`File ${fname} is not valid. Skipping update.`)\r\n      throw err\r\n    }\r\n    return {}\r\n  }\r\n}\r\n\r\nfunction constructUpdatedTsconfig(obj: any) {\r\n  // These keys will be added / overwritten\r\n  const compilerOptionsCore = {\r\n    target: 'ES2022',\r\n    allowJs: true,\r\n    skipLibCheck: true,\r\n    esModuleInterop: true,\r\n    allowSyntheticDefaultImports: true,\r\n    strict: true,\r\n    forceConsistentCasingInFileNames: true,\r\n    noFallthroughCasesInSwitch: true,\r\n    module: 'ES2022',\r\n    moduleResolution: 'node',\r\n    noEmit: true,\r\n    baseUrl: '.'\r\n  }\r\n  // These subkeys will be added / overwritten\r\n  const compilerOptionsPathsInclude = {\r\n    '@main/*': [mainDir() + '/*']\r\n  }\r\n  // Delete superseded subkeys; for future use\r\n  const compilerOptionsPathsOmit: any[] = []\r\n  // --- End of setup ---\r\n  // Initialise a blank object for obj.compilerOptions if necessary\r\n  if (!isObj(obj.compilerOptions)) obj.compilerOptions = {}\r\n  obj.compilerOptions = { ...obj.compilerOptions, ...compilerOptionsCore }\r\n  // Configure and update obj.compilerOptions.lib\r\n  if (typeof obj.compilerOptions.lib === 'string')\r\n    obj.compilerOptions.lib = [obj.compilerOptions.lib]\r\n  if (\r\n    typeof obj.compilerOptions.lib === 'undefined' ||\r\n    !Array.isArray(obj.compilerOptions.lib)\r\n  )\r\n    obj.compilerOptions.lib = []\r\n  if (!obj.compilerOptions.lib.includes('ES2022'))\r\n    obj.compilerOptions.lib.push('ES2022')\r\n  if (!obj.compilerOptions.lib.includes('dom'))\r\n    obj.compilerOptions.lib.push('dom')\r\n  // Configure and update obj.compilerOptions.paths\r\n  if (typeof obj.compilerOptions.paths === 'undefined')\r\n    obj.compilerOptions.paths = {}\r\n  obj.compilerOptions.paths = {\r\n    ...obj.compilerOptions.paths,\r\n    ...compilerOptionsPathsInclude\r\n  }\r\n  compilerOptionsPathsOmit.map((key) =>\r\n    obj.compilerOptions.paths[key]\r\n      ? delete obj.compilerOptions.paths[key]\r\n      : null\r\n  )\r\n  // Configure and update obj.types\r\n  if (typeof obj.types === 'undefined') obj.types = []\r\n  if (typeof obj.types === 'string') obj.types = [obj.types]\r\n  if (!obj.types.includes('node')) obj.types.push('node')\r\n  return obj\r\n}\r\n\r\nfunction constructUpdatedPackage(obj: any) {\r\n  const coreInclude = {\r\n    name: mainDir(),\r\n    type: 'module'\r\n  }\r\n  const scriptsInclude = {\r\n    refresh: 'node ./node_modules/dxsvelte/dist/dxsvelte-init.js',\r\n    compile: 'node ./node_modules/dxsvelte/dist/dxsvelte-compiler.js'\r\n  }\r\n  const devDependenciesInclude = {\r\n    dxsvelte: '*',\r\n    '@types/node': '^18.14.6',\r\n    autoprefixer: '^10.4.14',\r\n    esbuild: '0.17.11',\r\n    'esbuild-plugin-inline-import': '^1.0.1',\r\n    'esbuild-plugin-postcss': '^0.1.4',\r\n    'esbuild-svelte': '^0.7.3',\r\n    'js-base64': '^3.7.5',\r\n    postcss: '^8.4.21',\r\n    svelte: '^3.58.0',\r\n    'svelte-preprocess': '^5.0.3'\r\n  }\r\n  // --- End of setup ---\r\n  obj = { ...obj, ...coreInclude }\r\n  if (!isObj(obj.scripts)) obj.scripts = {}\r\n  obj.scripts = { ...obj.scripts, ...scriptsInclude }\r\n  if (!isObj(obj.devDependencies)) obj.devDependencies = {}\r\n  obj.devDependencies = { ...obj.devDependencies, ...devDependenciesInclude }\r\n  return obj\r\n}\r\n\r\nconst update = {\r\n  dxsvelte: async () => {\r\n    const printErr = () =>\r\n      console.error(\r\n        `Could not install dxsvelte.py. If the file already exists from a previous init, ignore this error.`\r\n      )\r\n    const fpath = getPath('dxsvelte.py')\r\n    try {\r\n      writeFileSync(fpath, dxsvelteTemplate)\r\n    } catch (err) {\r\n      printErr()\r\n      return false\r\n    }\r\n    return true\r\n  },\r\n  package: async () => {\r\n    const fpath = getPath('package.json')\r\n    const file = await getExistingJson(getPath(fpath))\r\n    const result = constructUpdatedPackage(file)\r\n    writeFileSync('./package.json', JSON.stringify(result, null, 4))\r\n    return true\r\n  },\r\n  tsconfig: async () => {\r\n    const fpath = getPath('tsconfig.json')\r\n    const file = await getExistingJson(fpath)\r\n    const result = constructUpdatedTsconfig(file)\r\n    writeFileSync('./tsconfig.json', JSON.stringify(result, null, 4))\r\n    return true\r\n  }\r\n}\r\n\r\nexport async function updateAll() {\r\n  try {\r\n    const result = await Promise.all([\r\n      update.package(),\r\n      update.tsconfig(),\r\n      update.dxsvelte()\r\n    ])\r\n    if (result.includes(false)) {\r\n      throw new Error('Some or all files could not be updated.')\r\n    }\r\n    return true\r\n  } catch (err) {\r\n    console.error('Update Failed.', err)\r\n    return false\r\n  }\r\n}", "// import sourceMap from \"source-map-support\";\r\nimport { existsSync, mkdirSync, readdirSync, readFileSync, rmSync, unlinkSync } from \"fs\";\r\nimport { join, resolve } from \"path\";\r\nimport * as url from \"url\";\r\n\r\nexport const cache = \"__svcache__\";\r\nexport const pythonCmd = \"python\";\r\nexport const __basedir = resolve(process.cwd());\r\nexport const __filename = url.fileURLToPath(import.meta.url);\r\nexport const __dirname = url.fileURLToPath(new URL(\".\", import.meta.url));\r\nexport const __cache = join(__basedir, cache);\r\n\r\n// Must verify the current working directory before continuing with configuration.\r\nconst runningInProjectRoot = existsSync(join(__basedir, \"manage.py\"));\r\nif (!runningInProjectRoot) {\r\n  console.error(\r\n    \"This script must be run from the Django project's root directory. Exiting.\"\r\n  );\r\n  process.exit(1);\r\n}\r\nconsole.log(`${__basedir} is a Django project directory. Continuing.`);\r\n\r\nexport const app_name = getMainApp();\r\nexport const __main = getMainApp();\r\nexport const __maindir = join(__basedir, __main);\r\n\r\nexport function getMainApp() {\r\n  const rxFunctionString =\r\n    /os\\.environ\\.setdefault\\(\\s*(['\\\"`])DJANGO_SETTINGS_MODULE\\1\\s*,\\s*\\s*(['\\\"`])(.+?)\\2\\s*\\)/;\r\n  const settingsStr = readFileSync(join(__basedir, \"manage.py\"), \"utf8\");\r\n  const settingsStrExtract = settingsStr.match(rxFunctionString) ?? [];\r\n  const settingsModuleExtract =\r\n    settingsStrExtract?.length > 3 ? settingsStrExtract[3] : \"\";\r\n  if (settingsModuleExtract === \"\") {\r\n    throw new Error(\"Could not extract settings from manage.py. Exiting.\");\r\n  }\r\n  const mainModuleExtract = settingsModuleExtract.split(\".\");\r\n  const mainModuleStr = mainModuleExtract[0];\r\n  return mainModuleStr;\r\n}\r\n\r\nexport function prepareSvCache() {\r\n  if (!existsSync(__cache)) {\r\n    mkdirSync(__cache, { recursive: true });\r\n  } else {\r\n    const files = readdirSync(__cache);\r\n    files.forEach((file) => {\r\n      const filePath = join(__cache, file);\r\n      unlinkSync(filePath);\r\n    });\r\n  }\r\n}\r\n\r\nexport function cleanSvCache() {\r\n  const files = readdirSync(__cache);\r\n  files.forEach((file) => {\r\n    const filePath = join(__cache, file);\r\n    unlinkSync(filePath);\r\n  });\r\n  rmSync(__cache, { recursive: true, force: true});\r\n  console.log(`Cleaned ${cache} artefacts.`);\r\n}\r\n\r\nexport default {\r\n  app_name,\r\n  cache,\r\n  pythonCmd,\r\n  __basedir,\r\n  __filename,\r\n  __dirname,\r\n  __cache,\r\n  __main,\r\n  __maindir,\r\n  prepareSvCache,\r\n  cleanSvCache\r\n};\r\n", "import {\r\n  __basedir,\r\n} from \"./settings/config\";\r\n\r\nimport { updateAll } from \"./django/addFiles\";\r\n\r\n// Prepare root files\r\nupdateAll();\r\n\r\nconsole.log('DxSvelte initialisation completed. Remember to run npm i in order to install local dependencies and\\nupdate your .gitignore to exclude node_modules')"],
  "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",
  "names": ["dxsvelte_default", "accessSync", "readFileSync", "writeFileSync", "existsSync", "mkdirSync", "readdirSync", "readFileSync", "rmSync", "unlinkSync", "join", "resolve", "url", "cache", "__basedir", "resolve", "__filename", "__dirname", "__cache", "join", "cache", "runningInProjectRoot", "existsSync", "app_name", "getMainApp", "__main", "__maindir", "rxFunctionString", "settingsStrExtract", "readFileSync", "settingsModuleExtract", "basename", "join", "getPath", "file", "__basedir", "exists", "fpath", "accessSync", "_mainDir", "mainDir", "match", "readFileSync", "djangoSettingsModule", "isObj", "obj", "getExistingJson", "json", "fname", "err", "constructUpdatedTsconfig", "compilerOptionsCore", "compilerOptionsPathsInclude", "compilerOptionsPathsOmit", "key", "constructUpdatedPackage", "coreInclude", "scriptsInclude", "devDependenciesInclude", "update", "printErr", "writeFileSync", "dxsvelte_default", "result", "updateAll", "updateAll"]
}
