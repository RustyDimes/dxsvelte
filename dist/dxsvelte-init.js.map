{
  "version": 3,
  "sources": ["../src/django/dxsvelte.$.py", "../src/django/package.$.json", "../src/django/tsconfig.$.json", "../src/django/addFiles.ts", "../src/settings/config.ts", "../src/compiler/injector.ts", "../src/entrypoint-init.ts"],
  "sourcesContent": ["export default \"from django.http import HttpResponse\\r\\nfrom django.conf import settings\\r\\nfrom django.urls import resolve\\r\\nfrom os.path import join, exists\\r\\nfrom subprocess import run\\r\\nfrom urllib.parse import quote\\r\\nimport json\\r\\n\\r\\n# Currently unused, on the to-do list\\r\\nfrom django.middleware import csrf\\r\\n\\r\\nsvelte_ssr_js_path = join(settings.BASE_DIR, \\\"{{__main}}\\\", \\\"svelte.ssr.js\\\")\\r\\nif exists(svelte_ssr_js_path):\\r\\n    svelte_ssr_js_utf8 = open(svelte_ssr_js_path, \\\"r\\\").read()\\r\\nelse:\\r\\n    svelte_ssr_js_utf8 = \\\"console.log(404);\\\"\\r\\n\\r\\nsvelte_ssr_html_path = join(settings.BASE_DIR, \\\"static\\\", \\\"index.html\\\")\\r\\nif exists(svelte_ssr_html_path):\\r\\n    svelte_ssr_html_utf8 = open(svelte_ssr_html_path, \\\"r\\\").read()\\r\\nelse:\\r\\n    svelte_ssr_html_utf8 = \\\"\\\"\\\"<!doctype html><html><head><meta charset=\\\"utf-8\\\" /><meta http-equiv=\\\"X-UA-Compatible\\\" content=\\\"IE=edge,chrome=1\\\" /><meta content=\\\"width=device-width, initial-scale=1.0\\\" name=\\\"viewport\\\" /><meta name=\\\"viewport\\\" content=\\\"width=device-width\\\" /><title>Django App</title></head><body>{{app}}</body>{{spa}}<script src='/static/svelte.csr.js' defer></script></html>\\\"\\\"\\\"\\r\\n\\r\\ndef abs_path(*paths):\\r\\n    joined_path = '/'.join(paths)\\r\\n    cleaned_path = joined_path.replace('//', '/')\\r\\n    if cleaned_path.startswith('/'):\\r\\n        final_path = cleaned_path\\r\\n    else:\\r\\n        final_path = '/' + cleaned_path\\r\\n    final_path = final_path.rstrip('/')\\r\\n    return final_path\\r\\n\\r\\ndef svelte_ssr_html_wrap(app):\\r\\n    return svelte_ssr_html_utf8.replace(\\\"{{app}}\\\", app, 1)\\r\\n\\r\\ndef _normalise_url(url):\\r\\n    url = url.strip(\\\"/\\\")\\r\\n    url = \\\"/\\\" + url.lstrip(\\\"/\\\")\\r\\n    return url\\r\\n\\r\\ndef _render(req_path, data = {}):\\r\\n    json_string = json.dumps(data)\\r\\n    encoded_str = quote(json_string)\\r\\n    node = run([\\\"node\\\", svelte_ssr_js_path, req_path, encoded_str], capture_output=True, check=True)\\r\\n    stdout = node.stdout.decode(\\\"utf-8\\\")\\r\\n    node_dict = json.loads(stdout)\\r\\n    result = node_dict[\\\"html\\\"]\\r\\n    return result\\r\\n\\r\\ndef route(request, get, post):\\r\\n    if request.method == \\\"GET\\\" or request.method == \\\"DXS\\\":\\r\\n        return get()\\r\\n    if request.method == \\\"POST\\\":\\r\\n        return post()\\r\\n\\r\\ndef render(request, data = {}):\\r\\n    # This is a variant of GET to serve the SPA fetches\\r\\n    if request.method == \\\"DXS\\\":\\r\\n        data_json = json.dumps(data)\\r\\n        return HttpResponse(data_json, content_type=\\\"application/json\\\")\\r\\n    req_path = _normalise_url(resolve(request.path_info).route)\\r\\n    rendered_output = _render(req_path, data)\\r\\n    interpolated_output = svelte_ssr_html_wrap(rendered_output)\\r\\n    return HttpResponse(interpolated_output, content_type=\\\"text/html\\\")\\r\\n\";", "export default \"{\\n  \\\"name\\\": \\\"{{__main}}\\\",\\n  \\\"type\\\": \\\"module\\\",\\n  \\\"scripts\\\": {\\n    \\\"refresh\\\": \\\"node ./node_modules/dxsvelte/dist/dxsvelte-init.js\\\",\\n    \\\"compile\\\": \\\"node ./node_modules/dxsvelte/dist/dxsvelte-compiler.js\\\"\\n  },\\n  \\\"devDependencies\\\": {\\n  \\\"dxsvelte\\\": \\\"*\\\",\\n    \\\"@types/node\\\": \\\"^18.14.6\\\",\\n    \\\"autoprefixer\\\": \\\"^10.4.14\\\",\\n    \\\"esbuild\\\": \\\"0.17.11\\\",\\n    \\\"esbuild-plugin-inline-import\\\": \\\"^1.0.1\\\",\\n    \\\"esbuild-plugin-postcss\\\": \\\"^0.1.4\\\",\\n    \\\"esbuild-svelte\\\": \\\"^0.7.3\\\",\\n    \\\"postcss\\\": \\\"^8.4.21\\\",\\n    \\\"svelte\\\": \\\"^3.57.0\\\",\\n    \\\"tailwindcss\\\": \\\"^3.3.0\\\",\\n    \\\"svelte-preprocess\\\": \\\"^5.0.3\\\"\\n  }\\n}\";", "export default \"{\\r\\n  \\\"compilerOptions\\\": {\\r\\n    \\\"target\\\": \\\"ES2022\\\",\\r\\n    \\\"lib\\\": [\\\"ES2022\\\", \\\"dom\\\"],\\r\\n    \\\"allowJs\\\": true,\\r\\n    \\\"skipLibCheck\\\": true,\\r\\n    \\\"esModuleInterop\\\": true,\\r\\n    \\\"allowSyntheticDefaultImports\\\": true,\\r\\n    \\\"strict\\\": true,\\r\\n    \\\"forceConsistentCasingInFileNames\\\": true,\\r\\n    \\\"noFallthroughCasesInSwitch\\\": true,\\r\\n    \\\"module\\\": \\\"ES2022\\\",\\r\\n    \\\"moduleResolution\\\": \\\"node\\\",\\r\\n    \\\"noEmit\\\": true,\\r\\n    \\\"baseUrl\\\": \\\".\\\",\\r\\n    \\\"paths\\\": {\\r\\n      \\\"@{{__main}}/*\\\": [\\\"{{__main}}/*\\\"]\\r\\n    }\\r\\n  },\\r\\n  \\\"ts-node\\\": {\\r\\n    \\\"esm\\\": true,\\r\\n    \\\"experimentalSpecifierResolution\\\": \\\"node\\\"\\r\\n  },\\r\\n  \\\"types\\\": [\\\"node\\\"]\\r\\n}\\r\\n\";", "// @ts-ignore\r\nimport dxsvelteTemplate from \"./dxsvelte.$.py\";\r\n// @ts-ignore\r\nimport packageJsonTemplate from \"./package.$.json\";\r\n// @ts-ignore\r\nimport tsconfigJsonTemplate from \"./tsconfig.$.json\";\r\nimport { existsSync, writeFileSync } from \"fs\";\r\nimport { __basedir, __main } from \"../settings/config\";\r\nimport { injectOptionsIntoString } from \"../compiler/injector\";\r\nimport type { Opts } from \"../compiler/injector\";\r\nimport { join } from \"path\";\r\n\r\nfunction isInstalled(file: string) {\r\n  const fname = join(__basedir, file);\r\n  return existsSync(fname);\r\n}\r\n\r\nfunction getPath(file: string) {\r\n  return join(__basedir, file);\r\n}\r\n\r\nfunction installConditional(fname: string, document: string, opts: Opts = {}) {\r\n  function printErr(fname: string){\r\n    console.error(`Could not install ${fname}. If the file already exists from a previous init, ignore this error.`);\r\n  }\r\n  if (!isInstalled(fname)) {\r\n    try {\r\n      const configuredFile = injectOptionsIntoString(opts, document);\r\n      writeFileSync(getPath(fname), configuredFile);\r\n    } catch (err) {\r\n      printErr(fname)\r\n    }\r\n  } else {\r\n    printErr(fname)\r\n  }\r\n}\r\n\r\nexport function installRootFiles() {\r\n  installConditional(\"dxsvelte.py\", dxsvelteTemplate, { __main });\r\n  installConditional(\"package.json\", packageJsonTemplate, { __main });\r\n  installConditional(\"tsconfig.json\", tsconfigJsonTemplate, { __main });\r\n}", "// import sourceMap from \"source-map-support\";\r\nimport { existsSync, mkdirSync, readdirSync, readFileSync, rmSync, unlinkSync } from \"fs\";\r\nimport { join, resolve } from \"path\";\r\nimport * as url from \"url\";\r\n\r\nexport const cache = \"__svcache__\";\r\nexport const pythonCmd = \"python\";\r\nexport const __basedir = resolve(process.cwd());\r\nexport const __filename = url.fileURLToPath(import.meta.url);\r\nexport const __dirname = url.fileURLToPath(new URL(\".\", import.meta.url));\r\nexport const __cache = join(__basedir, cache);\r\n\r\n// Must verify the current working directory before continuing with configuration.\r\nconst runningInProjectRoot = existsSync(join(__basedir, \"manage.py\"));\r\nif (!runningInProjectRoot) {\r\n  console.error(\r\n    \"This script must be run from the Django project's root directory. Exiting.\"\r\n  );\r\n  process.exit(1);\r\n}\r\nconsole.log(`${__basedir} is a Django project directory. Continuing.`);\r\n\r\nexport const app_name = getMainApp();\r\nexport const __main = getMainApp();\r\nexport const __maindir = join(__basedir, __main);\r\n\r\nexport function getMainApp() {\r\n  const rxFunctionString =\r\n    /os\\.environ\\.setdefault\\(\\s*(['\\\"`])DJANGO_SETTINGS_MODULE\\1\\s*,\\s*\\s*(['\\\"`])(.+?)\\2\\s*\\)/;\r\n  const settingsStr = readFileSync(join(__basedir, \"manage.py\"), \"utf8\");\r\n  const settingsStrExtract = settingsStr.match(rxFunctionString) ?? [];\r\n  const settingsModuleExtract =\r\n    settingsStrExtract?.length > 3 ? settingsStrExtract[3] : \"\";\r\n  if (settingsModuleExtract === \"\") {\r\n    throw new Error(\"Could not extract settings from manage.py. Exiting.\");\r\n  }\r\n  const mainModuleExtract = settingsModuleExtract.split(\".\");\r\n  const mainModuleStr = mainModuleExtract[0];\r\n  return mainModuleStr;\r\n}\r\n\r\nexport function prepareSvCache() {\r\n  if (!existsSync(__cache)) {\r\n    mkdirSync(__cache, { recursive: true });\r\n  } else {\r\n    const files = readdirSync(__cache);\r\n    files.forEach((file) => {\r\n      const filePath = join(__cache, file);\r\n      unlinkSync(filePath);\r\n    });\r\n  }\r\n}\r\n\r\nexport function cleanSvCache() {\r\n  const files = readdirSync(__cache);\r\n  files.forEach((file) => {\r\n    const filePath = join(__cache, file);\r\n    unlinkSync(filePath);\r\n  });\r\n  rmSync(__cache, { recursive: true, force: true});\r\n  console.log(`Cleaned ${cache} artefacts.`);\r\n}\r\n\r\nexport default {\r\n  app_name,\r\n  cache,\r\n  pythonCmd,\r\n  __basedir,\r\n  __filename,\r\n  __dirname,\r\n  __cache,\r\n  __main,\r\n  __maindir,\r\n  prepareSvCache,\r\n  cleanSvCache\r\n};\r\n", "import { readFileSync } from \"fs\";\r\nimport type { Loader, Plugin, PluginBuild, StdinOptions } from \"esbuild\";\r\nimport { resolve } from \"path\";\r\nimport { compile } from \"svelte/compiler\";\r\nimport { CompileOptions } from \"svelte/types/compiler\";\r\n\r\nexport interface Opts {\r\n  [key: string]: string;\r\n}\r\n\r\nexport function injectOptionsIntoString(opts: Opts, document: string): string {\r\n  Object.keys(opts).forEach((key) => {\r\n    const regexOpt = new RegExp(`{{${key}}}`, \"g\");\r\n    const regexOptOmit = new RegExp(`{{!${key}}}`, \"g\");\r\n    document = document.replace(regexOpt, opts[key]);\r\n    document = document.replace(regexOptOmit, `{{${key}}}`);\r\n  });\r\n  return document;\r\n}\r\n\r\nexport function injectorPlugin(opts: Opts = {}): Plugin {\r\n  return {\r\n    name: \"document-injector\",\r\n    setup(build) {\r\n      build.onLoad({ filter: /\\.\\$\\.[\\S]+$/ }, async (args) => {\r\n        const document = readFileSync(args.path, \"utf8\");\r\n        const injected = injectOptionsIntoString(opts, document);\r\n        const suffix = args.path.split(\".\").pop()! as Loader;\r\n        const contents = `export default ${JSON.stringify(injected)};`;\r\n        return {\r\n          contents,\r\n          loader: \"js\" as Loader,\r\n        };\r\n      });\r\n    },\r\n  };\r\n}\r\n\r\nfunction isolateLoader(\r\n  requested: string,\r\n  loaders: StdinOptions[]\r\n): StdinOptions | null {\r\n  const resolvedRequest = resolve(requested);\r\n  return (\r\n    loaders.find((item) => resolve(item.sourcefile!) === resolvedRequest) ??\r\n    null\r\n  );\r\n}\r\n\r\nexport function vfLoaderPlugin(loaders: StdinOptions[] = [], compileOptions: CompileOptions): Plugin {\r\n  return {\r\n    name: \"virtual-file-injector\",\r\n    setup(build) {\r\n      build.onResolve({ filter: /\\.vf\\.[\\S]+$/ }, async (args) => {\r\n        console.log(\"VF Resolved: \" + args.path);\r\n        return { path: args.path };\r\n      });\r\n      build.onLoad({ filter: /\\.vf\\.[\\S]+$/ }, async (args) => {\r\n        const currentDocument = isolateLoader(args.path, loaders);\r\n        const contents = currentDocument!.contents;\r\n        const loader = currentDocument!.loader as Loader;\r\n\r\n        // Compile the vf with Svelte's compiler, if applicable\r\n        //@ts-ignore\r\n        if (loader === 'svelte') {\r\n          const compiledObj = compile(contents as string, compileOptions);\r\n          const compiledJs = compiledObj?.js?.code ?? null\r\n          if (!compiledJs) {\r\n            throw new Error('Compilation Failed for: ' + args.path)\r\n          }\r\n          return { contents: compiledJs, loader: 'js' };\r\n        }\r\n        return {\r\n          contents,\r\n          loader,\r\n        };\r\n      });\r\n    },\r\n  };\r\n}\r\n", "import {\r\n  __basedir,\r\n} from \"./settings/config\";\r\n\r\nimport { installRootFiles } from \"./django/addFiles\";\r\n\r\n// Prepare root files\r\ninstallRootFiles();\r\n\r\nconsole.log('DxSvelte initialisation completed. Remember to run npm i in order to install local dependencies and\\nupdate your .gitignore to exclude node_modules')"],
  "mappings": "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",
  "names": ["dxsvelte_default", "package_default", "tsconfig_default", "existsSync", "writeFileSync", "existsSync", "mkdirSync", "readdirSync", "readFileSync", "rmSync", "unlinkSync", "join", "resolve", "url", "cache", "__basedir", "resolve", "__filename", "__dirname", "__cache", "join", "cache", "runningInProjectRoot", "existsSync", "app_name", "getMainApp", "__main", "__maindir", "rxFunctionString", "settingsStrExtract", "readFileSync", "settingsModuleExtract", "readFileSync", "resolve", "compile", "injectOptionsIntoString", "opts", "document", "key", "regexOpt", "regexOptOmit", "join", "isInstalled", "file", "fname", "__basedir", "existsSync", "getPath", "installConditional", "document", "opts", "printErr", "configuredFile", "injectOptionsIntoString", "writeFileSync", "installRootFiles", "dxsvelte_default", "__main", "package_default", "tsconfig_default", "installRootFiles"]
}
